{"version":3,"sources":["images/Logo.svg","images/rocket_launch_.svg","images/astronaut.svg","Components/Nav.js","Pages/Home.js","Pages/About.js","Components/useImagesSearch.js","Pages/Pictures.js","Pages/NotFound.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Nav","className","activeClassName","exact","to","src","logo","alt","Home","rocket","About","href","astronaut","useImagesSearch","query","useState","loading","setLoading","error","setError","pictures","setPictures","useEffect","cancel","axios","method","url","params","q","cancelToken","CancelToken","c","then","res","data","collection","items","catch","e","isCancel","Pictures","setQuery","type","onChange","target","value","placeholder","map","picture","index","links","key","NotFound","App","path","component","Boolean","window","location","hostname","match","ReactDOM","render","basename","process","document","getElementById","navigator","serviceWorker","ready","registration","unregister","console","message"],"mappings":"8FAAAA,EAAOC,QAAU,IAA0B,kC,mBCA3CD,EAAOC,QAAU,IAA0B,4C,mBCA3CD,EAAOC,QAAU,IAA0B,uC,+SCgC5BC,MA3Bf,WACE,OACE,yBAAKC,UAAU,UACb,kBAAC,IAAD,CAASC,gBAAgB,SAASC,OAAK,EAACC,GAAG,KACzC,yBAAKC,IAAKC,IAAML,UAAU,OAAOM,IAAI,UAEvC,wBAAIN,UAAU,aACZ,4BACE,kBAAC,IAAD,CAASC,gBAAgB,SAASC,OAAK,EAACC,GAAG,KAA3C,SAIF,4BACE,kBAAC,IAAD,CAASF,gBAAgB,SAASC,OAAK,EAACC,GAAG,aAA3C,aAIF,4BACE,kBAAC,IAAD,CAASF,gBAAgB,SAASC,OAAK,EAACC,GAAG,UAA3C,a,yBCNKI,MAZf,WACE,OACE,yBAAKP,UAAU,kBACX,yBAAKA,UAAU,aACb,gFACA,kBAAC,IAAD,CAAMG,GAAG,YAAYH,UAAU,YAA/B,aAEF,yBAAKI,IAAKI,IAAQF,IAAI,sBAAsBN,UAAU,a,yBCK/CS,MAbf,WACE,OACE,6BACE,yBAAKT,UAAU,mBACb,yBAAKA,UAAU,cACb,gEAAqC,uBAAGU,KAAK,yBAAR,2BAEvC,yBAAKN,IAAKO,IAAWL,IAAI,yBAAyBN,UAAU,iB,+BCuBrDY,MA/Bf,SAAyBC,GAAQ,IAAD,EACEC,oBAAS,GADX,mBACrBC,EADqB,KACZC,EADY,OAEFF,oBAAS,GAFP,mBAErBG,EAFqB,KAEdC,EAFc,OAGIJ,mBAAS,IAHb,mBAGrBK,EAHqB,KAGXC,EAHW,KA4B5B,OAvBAC,qBAAU,WAIN,IAAIC,EAHN,GAAY,IAATT,EAiBG,OAhBJG,GAAW,GACXE,GAAS,GAEPK,IACE,CACEC,OAAQ,MACRC,IAAK,qCACLC,OAAQ,CAACC,EAAGd,GACZe,YAAa,IAAIL,IAAMM,aAAY,SAAAC,GAAC,OAAIR,EAASQ,OAEjDC,MAAK,SAAAC,GACHZ,EAAYY,EAAIC,KAAKC,WAAWC,OAChCnB,GAAW,MACZoB,OAAM,SAAAC,GACDd,IAAMe,SAASD,MAEhB,kBAAMf,OAGhB,CAACT,IAEC,CAAEE,UAASE,QAAOE,aCadoB,MAxCf,WAAqB,IAAD,EACQzB,mBAAS,IADjB,mBACXD,EADW,KACJ2B,EADI,OAGmB5B,EAAgBC,GAA7CM,EAHU,EAGVA,SAAmBF,GAHT,EAGAF,QAHA,EAGSE,OAM3B,OACE,yBAAKjB,UAAU,sBACb,2BACEA,UAAU,YACVyC,KAAK,OACLC,SATN,SAAsBL,GACpBG,EAASH,EAAEM,OAAOC,QASdA,MAAO/B,EACPgC,YAAY,cAGV,yBAAK7C,UAAU,eACZmB,EAAS2B,KAAI,SAACC,EAASC,GACtB,GAAID,EAAQE,MACV,OACE,yBAAKjD,UAAU,aAAakD,IAAKF,GAC3B,yBACEhD,UAAU,iBACVI,IAAK2C,EAAQE,MAAM,GAAGvC,KACtBJ,IAAKyC,EAAQE,MAAM,GAAGvC,YAQ1C,6BAAMO,GAAS,W,MC3BNkC,MATf,WACE,OACE,yBAAKnD,UAAU,YACb,wCACA,+C,OC0BSoD,MAxBf,WACE,OACE,oCACA,kBAAC,EAAD,MACI,kBAAC,IAAD,KACE,kBAAC,IAAD,CACEC,KAAK,IACLnD,OAAK,EACLoD,UAAW/C,IAEb,kBAAC,IAAD,CACE8C,KAAK,YACLC,UAAWf,IAEb,kBAAC,IAAD,CACEc,KAAK,SACLC,UAAW7C,IAEb,kBAAC,IAAD,CAAO6C,UAAWH,OCfRI,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OACP,kBAAC,IAAD,CAAQC,SAAUC,aAChB,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDwHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBrC,MAAK,SAAAsC,GACJA,EAAaC,gBAEdlC,OAAM,SAAAnB,GACLsD,QAAQtD,MAAMA,EAAMuD,c","file":"static/js/main.b6b8a47c.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/Logo.322e6f11.svg\";","module.exports = __webpack_public_path__ + \"static/media/rocket_launch_.0a616663.svg\";","module.exports = __webpack_public_path__ + \"static/media/astronaut.0debd2e0.svg\";","import React from \"react\";\r\nimport \"./Nav.css\";\r\nimport logo from \"../images/Logo.svg\";\r\nimport { NavLink } from \"react-router-dom\";\r\n\r\nfunction Nav() {\r\n  return (\r\n    <nav className=\"navbar\">\r\n      <NavLink activeClassName=\"active\" exact to=\"/\">\r\n        <img src={logo} className=\"logo\" alt=\"logo\" />\r\n      </NavLink>\r\n      <ul className=\"nav-links\">\r\n        <li>\r\n          <NavLink activeClassName=\"active\" exact to=\"/\">\r\n            Home\r\n          </NavLink>\r\n        </li>\r\n        <li>\r\n          <NavLink activeClassName=\"active\" exact to=\"/pictures\">\r\n            Pictures\r\n          </NavLink>\r\n        </li>\r\n        <li>\r\n          <NavLink activeClassName=\"active\" exact to=\"/about\">\r\n            About\r\n          </NavLink>\r\n        </li>\r\n      </ul>\r\n    </nav>\r\n  );\r\n}\r\n\r\nexport default Nav;\r\n","import React from \"react\";\r\nimport \"./Home.css\";\r\nimport { Link } from \"react-router-dom\";\r\nimport rocket from \"../images/rocket_launch_.svg\";\r\n\r\nfunction Home() {\r\n  return (\r\n    <div className=\"home-container\">\r\n        <div className=\"home-text\">\r\n          <p>NASA images and videos to explore the outer space</p>\r\n          <Link to=\"/Pictures\" className=\"home-btn\">Discover</Link>\r\n        </div>\r\n        <img src={rocket} alt=\"rocket-illustration\" className=\"rocket\" />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Home;\r\n","import React from \"react\";\r\nimport './About.css';\r\nimport astronaut from \"../images/astronaut.svg\";\r\n\r\nfunction About() {\r\n  return (\r\n    <div>\r\n      <div className=\"about-container\">\r\n        <div className=\"about-text\">\r\n          <p>Application created with NASA API <a href=\"https://api.nasa.gov/\">https://api.nasa.gov/</a></p>\r\n        </div>\r\n        <img src={astronaut} alt=\"astronaut-illustration\" className=\"astronaut\" />\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default About;\r\n","import { useState, useEffect } from \"react\";\r\nimport axios from \"axios\";\r\n\r\nfunction useImagesSearch(query) {\r\n    const [loading, setLoading] = useState(true);\r\n    const [error, setError] = useState(false);\r\n    const [pictures, setPictures] = useState([]);\r\n\r\n    useEffect(() => {\r\n      if(query != '') {\r\n        setLoading(true);\r\n        setError(false);\r\n        let cancel;\r\n          axios(\r\n            {\r\n              method: \"GET\",\r\n              url: \"https://images-api.nasa.gov/search\",\r\n              params: {q: query},\r\n              cancelToken: new axios.CancelToken(c => cancel = c)\r\n            }\r\n            ).then(res => {\r\n                setPictures(res.data.collection.items);\r\n                setLoading(false);\r\n            }).catch(e => {\r\n                if (axios.isCancel(e)) return\r\n            })\r\n            return () => cancel();\r\n      }\r\n        \r\n      }, [query]);\r\n    \r\n    return { loading, error, pictures};\r\n}\r\n\r\nexport default useImagesSearch\r\n","import React, { useState } from \"react\";\r\nimport \"./Pictures.css\";\r\nimport useImagesSearch from \"../Components/useImagesSearch\";\r\n\r\nfunction Pictures() {\r\n  const [query, setQuery] = useState(\"\");\r\n\r\n  const { pictures, loading, error } = useImagesSearch(query);\r\n\r\n  function handleSearch(e) {\r\n    setQuery(e.target.value);\r\n  }\r\n\r\n  return (\r\n    <div className=\"pictures-container\">\r\n      <input\r\n        className=\"searchbar\"\r\n        type=\"text\"\r\n        onChange={handleSearch}\r\n        value={query}\r\n        placeholder=\"Search...\"\r\n      />\r\n\r\n          <div className=\"cards-items\">\r\n            {pictures.map((picture, index) => {\r\n              if (picture.links) {\r\n                return (\r\n                  <div className=\"cards-item\" key={index}>\r\n                        <img\r\n                          className=\"cards-item-img\"\r\n                          src={picture.links[0].href}\r\n                          alt={picture.links[0].href}\r\n                        />\r\n                  </div>\r\n                );\r\n              }\r\n            })}\r\n          </div>\r\n      {/* <div className=\"loading\">{loading && \"Loading...\"}</div> */}\r\n      <div>{error && \"Error\"}</div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Pictures;\r\n","import React from \"react\";\r\nimport \"./NotFound.css\";\r\n\r\nfunction NotFound() {\r\n  return (\r\n    <div className=\"notfound\">\r\n      <p>Error 404</p>\r\n      <p>Page not found</p>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default NotFound;\r\n","import React from \"react\";\nimport \"./App.css\";\nimport Nav from \"./Components/Nav\";\nimport Home from \"./Pages/Home\";\nimport About from \"./Pages/About\";\nimport Pictures from \"./Pages/Pictures\";\nimport NotFound from \"./Pages/NotFound\";\nimport { Route, Switch } from \"react-router-dom\";\n\nfunction App() {\n  return (\n    <>\n    <Nav/>\n        <Switch>\n          <Route\n            path=\"/\"\n            exact\n            component={Home}\n          />\n          <Route\n            path=\"/pictures\"\n            component={Pictures}\n          />\n          <Route\n            path=\"/about\"\n            component={About}\n          />\n          <Route component={NotFound} />\n        </Switch>\n    </>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport { BrowserRouter as Router } from \"react-router-dom\";\n\nReactDOM.render(\n  <Router basename={process.env.PUBLIC_URL}>\n    <App />\n  </Router>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}